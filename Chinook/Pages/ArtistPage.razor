@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using Chinook.Services;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{

        <div class="d-flex align-items-start">
            <div class="flex-grow-1">

            <h1>@Artist.Name</h1>
            </div>
        <button class="btn btn-primary" title="Add Playlist" @onclick="@(() => OpenCreatePlaylistDialog())" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></button>
        </div>  


        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }

                          <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>

     

                    </td>
                </tr>
            }
            </tbody>
        </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @onchange="selectedPlayListValue">                
                <option value="0">-Please Select Play List--</option>
                @foreach (var playList in PlayLists)
                {
                    <option value="@playList.PlaylistId">@playList.Name</option>
                }
            </select>
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>


<Modal @ref="CreatePlaylistDialog">
    <Title>Add Playlist</Title>
    <Body>        
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @onchange=PlayListChange>
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddUserPlaylist">Save</button>
    </Footer>
</Modal>



@code {
    [Parameter] public long ArtistId { get; set; }
    [Inject] IArtistService ArtistService { get; set; }
    [Inject] IPlaylistService PlaylistService { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }  
    private Modal PlaylistDialog { get; set; }
    private Modal CreatePlaylistDialog { get; set; }

    private Artist Artist;
    private List<PlaylistTrack> Tracks;
 
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;

    public long SelectedPlayListValue = 0;

    private List<ClientModels.Playlist> PlayLists;

    string playListName = "";

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();  
        Artist = await ArtistService.GetArtisByIdAsync(ArtistId); 

        Tracks = await PlaylistService.GetPlaylistTrackByArtistIdAsync(CurrentUserId, ArtistId);

        PlayLists = await PlaylistService.GetUserPlaylistAsync(CurrentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await AuthenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        await PlaylistService.AddFavoriteTrack(CurrentUserId, trackId);

        Tracks = await PlaylistService.GetPlaylistTrackByArtistIdAsync(CurrentUserId, ArtistId);

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        await PlaylistService.UnFavoriteTrack(CurrentUserId, trackId);

        Tracks = await PlaylistService.GetPlaylistTrackByArtistIdAsync(CurrentUserId, ArtistId);

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private void OpenCreatePlaylistDialog()
    {
        CloseInfoMessage();
        CreatePlaylistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        if (SelectedPlayListValue!=0)
        {
            await PlaylistService.AddTrackToPlaylist(SelectedPlayListValue, SelectedTrack.TrackId);
            CloseInfoMessage();
            InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {{playlist name}}.";
            PlaylistDialog.Close();
        }
       
    }

    private async Task AddUserPlaylist()
    {
        if (!string.IsNullOrWhiteSpace(playListName))
        {
            await PlaylistService.AddUserPlaylist(playListName, CurrentUserId);
        }       
        CloseInfoMessage();
        playListName = "";
        CreatePlaylistDialog.Close();
    }
    
    async Task PlayListChange(ChangeEventArgs args)
    {
        playListName = args.Value.ToString();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    public void selectedPlayListValue(ChangeEventArgs selectEvent)
    {
        SelectedPlayListValue = long.Parse(selectEvent.Value.ToString());
    }
}
