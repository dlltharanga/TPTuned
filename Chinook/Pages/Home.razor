@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using Chinook.Services;

<PageTitle>Index</PageTitle>

<h1>Artists</h1>
<div class="d-flex align-items-start">
    
    <div class="flex-grow-1">     
        <input type="text" id="txtSearch" class="form-control" placeholder="Search artists" value="@SearchText" @onchange="this.OnTextChange">
    </div>
    <button type="button" class="bi bi-search" aria-label="Search" @onclick="SearchArtists"></button>
</div>

@if (Artists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Inject] IArtistService ArtistService { get; set; }
    private string SearchText { get; set; } = "";

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
    }

    public async Task<List<Artist>> GetArtists()
    {  
        var artistList = await ArtistService.GetArtistListAsync();
        return artistList;
    }

    public async Task SearchArtists()
    {
        var artistList = await ArtistService.GetArtistListByNameAsync(SearchText);
        Artists = artistList;
    }

    private async Task OnTextChange(ChangeEventArgs e)
    {
        SearchText = "";
        if (e.Value != null && !string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            SearchText = e.Value.ToString();          
            await SearchArtists();
            await ValueChanged.InvokeAsync(SearchText);
        }       
    }

}
